<header>
    <p>画像処理アプリ</p>
</header>
<div class="wrapper">
    <%= form_tag("/", {multipart: true}) do %>
        <p>表示する画像を選択してください．</p>
        <label for="file_photo" class="file_photo">
            ＋写真を選択
            <input type="file" name="image" accept="image/png,image/jpeg,image/gif" style="display:none;" id="file_photo">
        </label>
        <label for="disp_photo" class="disp_photo">
            画像表示
            <input type="submit" value="画像表示" style="display:none;" id="disp_photo">
        </label>
    <% end %>
    <%= form_tag("/proccess") do %>
        <label for="image_proc" class="image_proc">
            画像処理
            <input type="submit" style="display:none;" id="image_proc">
        </label>
    <% end %>
    <%= form_tag("/threshold") do %>
        <label for="image_thresh" class="image_thresh">
            二値化
            <input type="submit" style="display:none;" id="image_thresh">
            <p class="thresh_cap">閾値：</p>
            <input type="number" name="threshold" class="thresh_rate" min="0" max="1" step="0.01" value="0.5">
        </label>
    <% end %>
    <%= form_tag("/wave") do %>
        <label for="image_wave" class="image_wave">
            <span>WAVE</span>
            <input type="submit" style="display:none;" id="image_wave">
            <p class="wave_val1_cap">振幅：</p>
            <p class="wave_val2_cap">波長：</p>
            <% if @amp!=nil %>
                <input type="number" name="wave_amp" class="wave_val1" min="0" max="300" step="1" value="<%= "#{@amp}" %>">
                <input type="number" name="wave_len" class="wave_val2" min="0" max="300" step="1" value="<%= "#{@len}" %>">
            <% else %>
                <input type="number" name="wave_amp" class="wave_val1" min="0" max="300" step="1" value="25">
                <input type="number" name="wave_len" class="wave_val2" min="0" max="300" step="1" value="250">
            <% end %>
        </label>
    <% end %>
    <input type="button" value="－縮小" id="smaller" style="margin-left:5px;">
    <input type="button" value="＋拡大" id="bigger">
    <input type="button" value="リセット" id="reset">
    <br>
    <% if @register == true %>
        <input type="checkbox" name="mode" style="margin-left:5px;" id="mode" checked> 登録モード
    <% else %>
        <input type="checkbox" name="mode" style="margin-left:5px;" id="mode"> 登録モード
    <% end %>
    <br>
    <p style="margin-left:5px;">国名</p>
    <input type="text" placeholder="country name" id="country" style="margin-left:5px;">
    <br>
    <p style="padding-left:5px;">首都</p>
    <input type="text" placeholder="capital name" id="capital" style="margin-left:5px;">
    <br>
    <p style="margin-left:3px;" id="country_count">国リスト</p>
    <select name="delete_menu" id="delete_menu" style="margin-left:5px;">
        <option></option>
    </select>
    <% if @register==true %>
        <input type="button" value="削除" id="delete" style="margin-left:2px;">
        <input type="button" value="履歴" id="history" style="margin-left:2px;">
    <% else %>
        <input type="button" value="削除" id="delete" disabled="disabled" style="margin-left:2px;">
        <input type="button" value="履歴" id="history" disabled="disabled" style="margin-left:2px;">
    <% end %>
    <br>
    <span id="mouse-position"></span>
    <br>
    <span id="img-position"></span>
    <br>
    <span id="org-position"></span>
    <br>
    <span id="test">***</span>
</div>

<div class="display-space" id="display-space">
    <% if @image_path!=nil %>
        <img src="temp.jpg" class="input-image" id="input-image">
    <% elsif @flg && @top!=nil %>
        <img src="テスト画像.png" class="input-image" id="input-image" style="<%= "top: #{@top}; left: #{@left}; width: #{@width}; height: #{@height}; max-width: initial; max-height: initial;" %>">
    <% elsif @flg && @top==nil %>
        <img src="テスト画像.png" class="input-image" id="input-image">
    <% else %>
        <%# コメントアウト
        <div class="no-image">
            <img src="image_icon.png" class="icon-image">
            <h1>No Image</h1>
        </div>
        %>
        <img src="country_region/world_map.png" class="input-image" id="input-image">
    <% end %>
    <span class="horizontal" id="horizontal"></span>
    <span class="vertical" id="vertical"></span>
</div>

<script type="text/javascript">
    var style_size = 0;
    var mX = 0 ;
    var mY = 0;
    var ini_width = 0;
    var ini_height = 0;
    var top_pos  = "";
    var left_pos  = "";
    var img_h  = "";
    var img_w  = "";
    var img_top_abs = "";
    var img_left_abs = "";
    var img_mouse_x = 0;
    var img_mouse_y = 0;
    var OrgWidth = 0;
    var OrgHeight = 0;
    var Org_mouse_x = 0;
    var Org_mouse_y = 0;
    var mX_start = 0;
    var mY_start = 0;
    var drag_flg = false
    var out_range_flg = false
    const mode = document.getElementsByName("mode");
    var mX_before = 0;
    var mY_before = 0;
    var img_move_flg = false; //マウスダウン中はtrue,マウスアップ中はfalse
    var check =false //登録したデータがファイルに追加されているかチェック（デバッグ用）
    //--------------------------------------------------------------------
    // publicフォルダからの相対パスで指定
    // 謎現象：country_pos.txtと指定すると、publicにそのファイル名がないのに読み込まれる．
    var temp_str = readTextFile("country.txt")
    // var temp_str = readTextFile("country_region/country_pos.txt")
    var country_table = [];
    country_table = temp_str.split(/\n/) //「japan/tokyo/[1022,2091]」改行コードで配列化
    country_table = sort_data(country_table)
    display_list() // ドロップダウンに国をリストする
    function sort_data(table){
        // var country = str.split('/')
        var temp = ""
        for(var i=0; i<table.length-1; i++){
            for(var j=i+1; j<=table.length - 1; j++){
                if(table[i].toLowerCase() > table[j].toLowerCase()){ //大文字と小文字を区別しない
                    temp = table[i]
                    table[i] = table[j]
                    table[j] = temp
                }
            }
        }
        return table;
    }
    //国リストを表示
    function display_list(){
        var target_items = '<select name="delete_menu" id="delete_menu">';
        var country_count = 0;
        country_table.forEach(function( str ) {
            var country = str.split('/');
            if(country[0] != ""){ //空白は表示しない（ファイルの最終行に改行があるため）
                target_items = target_items + '<option value="' + country[0] + '">'+country[0]+'</option>';
                country_count++;
                // デバッグ用
                var x = "<%= @country %>";
                if(country[0]==x){
                    check=true
                }//ここまで
            }
        });
        if(check==false && "<%= @country %>"!=""){alert("<%= @country %>"+"が追加されていません")} //デバッグ用
        target_items = target_items + '</select>';
        elem = document.getElementById('delete_menu')
        elem.innerHTML = target_items
        elem_count = document.getElementById('country_count')
        elem_count.innerHTML = '<p style="padding-left:5px;" id="country_count">国リスト('+ country_count +'カ国)</p>'
    }

    //国の特定と表示
    function country_display(col,row) {
        var pos_key = "["+col + ", " + row+"]";
        country_table.forEach(function( str ) {
            if(str.indexOf(pos_key) != -1){
                var country = str.split('/')
                //画像表示
                elem = document.getElementById('input-image')
                elem.src = "country_region/"+country[0] + ".png";
                m_position = document.getElementById('test')
                m_position.innerHTML = '<span id="test">国名：'+country[0]+' 首都名'+ country[1] +'</span>'
            }
        });
    }
    //ファイル読み込み
    function readTextFile(fileName) {
        var reqFile = new XMLHttpRequest();
        reqFile.open('GET', fileName, false);
        reqFile.send(null);
        return reqFile.responseText;
    }
    // function readTextFile(file){
    //     var rawFile = new XMLHttpRequest();
    //     var allText = "";
    //     rawFile.open("GET", file, false);
    //     rawFile.onreadystatechange = function ()
    //     {
    //         if(rawFile.readyState === 4)
    //         {
    //             if(rawFile.status === 200 || rawFile.status == 0)
    //             {
    //                 allText = rawFile.responseText;
    //             }
    //         }
    //     }
    //     rawFile.send(null);
    //     return allText
    // }

    //--------------------------------------------------------------------
    // 登録モードボタン
    document.getElementById("mode").onclick = function (event) {
        const mode = document.getElementsByName("mode");
        var delete_btn = document.getElementById("delete")
        var history_btn = document.getElementById("history")
        if(mode[0].checked){
            //登録モードがON
            delete_btn.disabled = false;
            history_btn.disabled = false;
        }else{
            delete_btn.disabled = true;
            history_btn.disabled = true;
        }
    };

    // 縮小ボタン
    document.getElementById("smaller").onclick = function (event) {
        // 縮小
        photo_scale_smaller();
    }
    // 拡大ボタン
    document.getElementById("bigger").onclick = function (event) {
        // 拡大
        photo_scale_bigger();
    }
    // リセットボタン
    document.getElementById("reset").onclick = function (event) {
        // リセット
        photo_scale_reset();
    }
    // データ削除ボタン（登録モードのとき）
    // 選択されている国を登録から削除する
    // データを削除したテキスト内容をコントローラに送る
    document.getElementById("delete").onclick = function (event) {
        // 削除
        var delete_key = $('#delete_menu option:selected').text(); //例：japan
        //データを削除するpostリクエスト
        postDeleteCountry(delete_key);
    }
    // 履歴ボタン
    document.getElementById("history").onclick = function (event) {
        var temp_str = readTextFile("country_region/history.txt")
        // var log_record = temp_str.split(/\n/) 
        alert(temp_str)
    }
    // 画像上でクリック
    document.getElementById("input-image").onclick = function (event) {
        if(drag_flg){
            //マウスダウンとマウスアップの間にマウス移動があった場合、クリックとみなさない！
            return
        }
        // 画像処理
        const mode = document.getElementsByName("mode");
        var country_name = document.getElementById("country").value;
        var capital_name = document.getElementById("capital").value;
        if(mode[0].checked){
            if(country_name != "" && capital_name != ""){
                var result = window.confirm('国を登録しますか？');    
                if(result) {
                    postForm(Org_mouse_x + ',' + Org_mouse_y);
                }
            }else{
                alert("国名、首都名を入力してください")
            }
        }else{
            alert("管理モードがONになっていません！")
        }
    }
    //マウスホイール
    document.addEventListener("mousewheel", function(e) {
        //画像表示スペース上でホイールされたら、画像のサイズ変更をする
        // var border_kind = window.getComputedStyle(document.getElementById("input-image"), null).getPropertyValue('border');        
        var elem = document.getElementById("input-image");
        var style = elem.currentStyle || document.defaultView.getComputedStyle(elem, null);
        var border_kind = style.getPropertyValue('border-top-color');
        if(border_kind.indexOf('128') == -1){ //hover時のborderプロパティで判断(greenなら)
            return  //範囲外
        }
        var delta = e.deltaY;
        if (delta < 0){
            // 拡大
            photo_scale_bigger();
        }else{
            // 縮小
            photo_scale_smaller();
        }
    });

    //マウスダウン
    document.addEventListener("mousedown", function(e) {
        out_range_flg = false
        // var border_kind = window.getComputedStyle(document.getElementById("input-image"), null).getPropertyValue('border');
        var elem = document.getElementById("input-image");
        var style = elem.currentStyle || document.defaultView.getComputedStyle(elem, null);
        var border_kind = style.getPropertyValue('border-top-color');
        if(border_kind.indexOf('128') == -1){ //hover時のborderプロパティで判断（greenなら）
            //範囲外
            out_range_flg = true //マウスアップ時にこのフラグを見て、判断
            return
        }
        mX_start = e.pageX;  //X座標
        mY_start = e.pageY;  //Y座標
        drag_flg = false;   //フラグリセット
        img_move_flg = true; //マウスダウン中はtrue
        //test
        mX_before = e.pageX;  //X座標
        mY_before = e.pageY;  //Y座標
    });
    //マウスアップ
    document.addEventListener("mouseup", function(e) {
        if(out_range_flg==true){ //マウスダウンした場所が画像上でない場合、画像の移動はなし
            //範囲外
            return
        }
        mX_End = e.pageX;  //X座標
        mY_End = e.pageY;  //Y座標
        if(mX_start != mX_End || mY_start != mY_End){
            drag_flg = true //マウス移動があったため、フラグをたてる
        }
        img_move_flg = false; //マウスアップ中はfalse
    });

    function image_move(){
        if(img_move_flg==true){
            diff_x = mX - mX_before; // +:右方向 -:左方向
            diff_y = mY - mY_before; // +:下方向 -:上方向
            str_top = parseFloat(window.getComputedStyle(document.getElementById("input-image"), null).getPropertyValue('top')) + diff_y
            str_top = str_top + "px"
            str_left = parseFloat(window.getComputedStyle(document.getElementById("input-image"), null).getPropertyValue('left')) + diff_x
            str_left = str_left + "px"
            document.getElementById("input-image").style.top = str_top;
            document.getElementById("input-image").style.left = str_left;
            mX_before = mX;
            mY_before = mY;
        }
    };

    document.addEventListener('dragstart', function(event) {
    const draggable = event.target.getAttribute('draggable');
    // 明示的にdraggableにしている要素以外ドラッグ禁止
    if (!draggable || draggable === 'auto') {
        event.preventDefault();
    }
    });
    // マウスポインタの位置
    document.addEventListener("mousemove", function(e){
        mX = e.pageX;  //X座標
        mY = e.pageY;  //Y座標
        //座標を表示する
        var m_position = document.getElementById('mouse-position')
        m_position.innerHTML = '<span id="mouse-position">ブラウザ上のマウス位置：('+ mX + ',' + mY + ')</span>'
        // var border_kind = window.getComputedStyle(document.getElementById("input-image"), null).getPropertyValue('border');
        var elem = document.getElementById("input-image");
        var style = elem.currentStyle || document.defaultView.getComputedStyle(elem, null); //全ブラウザ対応
        var border_kind = style.getPropertyValue('border-top-color');
        if(border_kind.indexOf('128') == -1){ //hover時のborderプロパティで判断（greenなら）
            //範囲外
            document.getElementById("vertical").style.display = 'none';
            document.getElementById("horizontal").style.display = 'none';
            return
        }
        //縦線表示
        var X = mX - 300;
        document.getElementById("vertical").style.left = X + 'px';
        document.getElementById("vertical").style.display = 'inline-block';
        //横線表示
        var Y = mY - 60;
        document.getElementById("horizontal").style.top = Y + 'px';
        document.getElementById("horizontal").style.display = 'inline-block';
        //座標の表示
        position_display();
        country_display(Org_mouse_x,Org_mouse_y);
        image_move();
    });
    function position_display(){
        //画像上のマウスの位置
        // top,leftはdisplay_splaceの中心座標（原点はdisplay_spaceの左上）
        // 画像はtransformでw/hの50%分移動させて中央揃えしている
        // display_spaceのtop/left分だけ座標をプラスする
        top_pos  = window.getComputedStyle(document.getElementById("input-image"), null).getPropertyValue('top');
        left_pos  = window.getComputedStyle(document.getElementById("input-image"), null).getPropertyValue('left');
        img_h  = window.getComputedStyle(document.getElementById("input-image"), null).getPropertyValue('height');
        img_w  = window.getComputedStyle(document.getElementById("input-image"), null).getPropertyValue('width');
        img_top_abs = parseFloat(top_pos) - (parseFloat(img_h) / 2) + 60
        img_left_abs = parseFloat(left_pos) - (parseFloat(img_w) / 2) + 300;
        // 画像上のマウス位置
        img_mouse_x = Math.round(mX - img_left_abs)
        img_mouse_y = Math.round(mY - img_top_abs)
        // 画像上のマウス位置表示
        m_position = document.getElementById('img-position')
        m_position.innerHTML = '<span id="img-position">画像上のマウス位置：('+ img_mouse_x + ',' + img_mouse_y + ')</span>'
        // オリジナル画像に対するマウス位置
        OrgWidth = parseFloat(document.getElementById('input-image').naturalWidth);
        OrgHeight = parseFloat(document.getElementById('input-image').naturalHeight);
        Org_mouse_x = Math.round((OrgWidth / parseFloat(img_w)) * img_mouse_x);
        Org_mouse_y = Math.round((OrgHeight / parseFloat(img_h)) * img_mouse_y);
        m_position = document.getElementById('org-position')
        m_position.innerHTML = '<span id="org-position">元画像上のマウス位置：('+ Org_mouse_x + ',' + Org_mouse_y + ')</span>'
    };
    // 縮小関数
    function photo_scale_smaller() {
        //スケール変換前の画像上のマウス位置
        position_display();
        var Org_mouse_x1 = Org_mouse_x
        var Org_mouse_y1 = Org_mouse_y
        // スケール変換前のサイズ:width
        style_size = window.getComputedStyle(document.getElementById("input-image"), null).getPropertyValue('width');
        style_size_h = window.getComputedStyle(document.getElementById("input-image"), null).getPropertyValue('height');
        style_size = parseFloat(style_size) * 0.95
        style_size_h = parseFloat(style_size_h) * 0.95
        document.getElementById("input-image").style.width = style_size+"px";
        document.getElementById("input-image").style.height = style_size_h+"px";
        document.getElementById("input-image").style.maxWidth = 'initial';
        document.getElementById("input-image").style.maxHeight = 'initial';
        // var border_kind = window.getComputedStyle(document.getElementById("input-image"), null).getPropertyValue('border');
        var elem = document.getElementById("input-image");
        var style = elem.currentStyle || document.defaultView.getComputedStyle(elem, null);
        var border_kind = style.getPropertyValue('border-top-color');
        if(border_kind.indexOf('128') == -1){ //hover時のborderプロパティで判断（greenなら）
            //範囲外
            //マウスポインタが画像に乗っていない時は以下実行しない（ボタンでサイズ変更したとき）
            return
        }
        //マウスポインタの位置を中心にサイズ変換する
        position_display(); //座標取得
        //X方向の計算・移動
        var differ_x = Org_mouse_x - Org_mouse_x1
        var left_val = window.getComputedStyle(document.getElementById("input-image"), null).getPropertyValue('left');
        width_after = window.getComputedStyle(document.getElementById("input-image"), null).getPropertyValue('width');
        differ_x = parseFloat(width_after) / parseFloat(OrgWidth) * differ_x //画像サイズに対するピクセルの大きさ調整
        var set_val = parseFloat(left_val) + differ_x
        document.getElementById("input-image").style.left = set_val + 'px';
        //Y方向の計算・移動
        var differ_y = Org_mouse_y - Org_mouse_y1
        var top_val = window.getComputedStyle(document.getElementById("input-image"), null).getPropertyValue('top');
        height_after = window.getComputedStyle(document.getElementById("input-image"), null).getPropertyValue('height');
        differ_y = parseFloat(height_after) / parseFloat(OrgHeight) * differ_y //画像サイズに対するピクセルの大きさ調整
        var set_val = parseFloat(top_val) + differ_y
        document.getElementById("input-image").style.top = set_val + 'px';
    };
    // 拡大関数
    function photo_scale_bigger() {
        //スケール変換前の画像上のマウス位置
        position_display();
        var Org_mouse_x1 = Org_mouse_x
        var Org_mouse_y1 = Org_mouse_y
        // スケール変換前のサイズ:width
        style_size = window.getComputedStyle(document.getElementById("input-image"), null).getPropertyValue('width');
        style_size_h = window.getComputedStyle(document.getElementById("input-image"), null).getPropertyValue('height');
        style_size = parseFloat(style_size) * 1.05
        style_size_h = parseFloat(style_size_h) * 1.05
        document.getElementById("input-image").style.width = style_size+"px";
        document.getElementById("input-image").style.height = style_size_h+"px";
        document.getElementById("input-image").style.maxWidth = 'initial';
        document.getElementById("input-image").style.maxHeight = 'initial';

        var border_kind = window.getComputedStyle(document.getElementById("input-image"), null).getPropertyValue('border');
        if(border_kind.indexOf('128') == -1){ //hover時のborderプロパティで判断（greenなら）
            //範囲外
            //マウスポインタが画像に乗っていない時は以下実行しない（ボタンでサイズ変更したとき）
            return
        }
        //マウスポインタの位置を中心にサイズ変換する
        position_display(); //座標取得
        //X方向の計算・移動
        var differ_x = Org_mouse_x - Org_mouse_x1
        var left_val = window.getComputedStyle(document.getElementById("input-image"), null).getPropertyValue('left');
        width_after = window.getComputedStyle(document.getElementById("input-image"), null).getPropertyValue('width');
        differ_x = parseFloat(width_after) / parseFloat(OrgWidth) * differ_x //画像サイズに対するピクセルの大きさ調整
        var set_val = parseFloat(left_val) + differ_x
        document.getElementById("input-image").style.left = set_val + 'px';
        //Y方向の計算・移動
        var differ_y = Org_mouse_y - Org_mouse_y1
        var top_val = window.getComputedStyle(document.getElementById("input-image"), null).getPropertyValue('top');
        height_after = window.getComputedStyle(document.getElementById("input-image"), null).getPropertyValue('height');
        differ_y = parseFloat(height_after) / parseFloat(OrgHeight) * differ_y //画像サイズに対するピクセルの大きさ調整
        var set_val = parseFloat(top_val) + differ_y
        document.getElementById("input-image").style.top = set_val + 'px';
    };

    // 画像サイズリセット
    function photo_scale_reset() {
        document.getElementById("input-image").style.width = 'auto';
        document.getElementById("input-image").style.height = 'auto';
        document.getElementById("input-image").style.maxWidth = '100%';
        document.getElementById("input-image").style.maxHeight = '100%';
        document.getElementById("input-image").style.top = '50%';
        document.getElementById("input-image").style.left = '50%';
        document.getElementById("input-image").style.transform = 'translate(-50%, -50%)';
    };
    // POST送信
    function postForm(value) {
        var form = document.createElement('form');
    
        form.method = 'POST';
        form.action = '/proccess';
    
        var request1 = document.createElement('input');
        request1.type = 'hidden'; //入力フォームが表示されないように
        request1.name = 'position';
        request1.value = value;
        form.appendChild(request1);

        var request2 = document.createElement('input');
        request2.type = 'hidden'; //入力フォームが表示されないように
        request2.name = 'top';
        request2.value = window.getComputedStyle(document.getElementById("input-image"), null).getPropertyValue('top');
        form.appendChild(request2);

        var request3 = document.createElement('input');
        request3.type = 'hidden'; //入力フォームが表示されないように
        request3.name = 'left';
        request3.value = window.getComputedStyle(document.getElementById("input-image"), null).getPropertyValue('left');
        form.appendChild(request3);

        var request4 = document.createElement('input');
        request4.type = 'hidden'; //入力フォームが表示されないように
        request4.name = 'width';
        request4.value = window.getComputedStyle(document.getElementById("input-image"), null).getPropertyValue('width');
        form.appendChild(request4);
        
        var request5 = document.createElement('input');
        request5.type = 'hidden'; //入力フォームが表示されないように
        request5.name = 'height';
        request5.value = window.getComputedStyle(document.getElementById("input-image"), null).getPropertyValue('height');
        form.appendChild(request5);

        var request6 = document.createElement('input');
        request6.type = 'hidden'; //入力フォームが表示されないように
        request6.name = 'country';
        request6.value =document.getElementById("country").value;
        form.appendChild(request6);

        var request7 = document.createElement('input');
        request7.type = 'hidden'; //入力フォームが表示されないように
        request7.name = 'capital';
        request7.value =document.getElementById("capital").value;
        form.appendChild(request7);

        document.body.appendChild(form);
        dispLoading("Now Loading ．．．")
        form.submit();
    }
    // POST送信(国名をキーにしてデータを削除する)
    function postDeleteCountry(value) {
        var form = document.createElement('form');
    
        form.method = 'POST';
        form.action = '/remove';
    
        var request1 = document.createElement('input');
        request1.type = 'hidden'; //入力フォームが表示されないように
        request1.name = 'country';
        request1.value = value;
        form.appendChild(request1);

        document.body.appendChild(form);
        dispLoading("Now Loading ．．．")
        form.submit();
    }

    /* ------------------------------
    Loading イメージ表示関数
    引数： msg 画面に表示する文言
    ------------------------------ */
    function dispLoading(msg){
        // 引数なし（メッセージなし）を許容
        if( msg == undefined ){
            msg = "";
        }
        // 画面表示メッセージ
        var dispMsg = "<div class='loadingMsg'>" + msg + "</div>";
        // ローディング画像が表示されていない場合のみ出力
        if($("#loading").length == 0){
            $("body").append("<div id='loading'>" + dispMsg + "</div>");
        }
    }
    /* ------------------------------
    Loading イメージ削除関数
    ------------------------------ */
    function removeLoading(){
        $("#loading").remove();
    }
</script>