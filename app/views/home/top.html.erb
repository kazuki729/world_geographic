  <!-- ここから
  コメント方法
  -->
<!-- 設定メニュー -->
<div class="wrapper">
    <header>
        <div></div>
        <p>WorldGeographic</p>
    </header>
    <!-- 管理モード -->
    <div class="admin" style="display: none">
        <p style="display:block; background-color: lightgreen; text-align:center; border-bottom: 1px solid black;">新規データ登録</p>
        <div style="padding: 10px;background-color: lightgreen">
            <p style="display: inline-block">国名</p>
            <input type="text" placeholder="country name" id="country" style="margin-left:5px;margin-bottom:5px;height:30px;">
            <br>
            <p style="display: inline-block"">首都</p>
            <input type="text" placeholder="capital name" id="capital" style="margin-left:5px;height:30px;">
        </div>
        <p style="display:block; background-color: lightcoral; text-align:center;border-bottom: 1px solid black;">削除データ登録</p>
        <div style="padding: 10px;background-color: lightcoral">
            <p style="margin-left:3px;">削除するデータを選択してください．</p>
            <select name="delete_menu" id="delete_menu" style="margin-left:5px;height:30px;">
                <option></option>
            </select>
            <% if @register==true %>
                <input type="button" value="削除" id="delete" style="margin-left:5px;">
                <input type="button" value="履歴" id="history" style="margin-left:2px;">
            <% else %>
                <input type="button" value="削除" id="delete" disabled="disabled" style="margin-left:5px;">
                <input type="button" value="履歴" id="history" disabled="disabled" style="margin-left:2px;">
            <% end %>
        </div>
        <p style="display:block; background-color: lightblue; text-align:center;border-bottom: 1px solid black;">透明バッチ処理</p>
        <div style="padding: 10px;background-color: lightblue">
            <% if @register==true %>
                <input type="button" value="透明処理" id="skelton" style="margin-left:2px;">
            <% else %>
                <input type="button" value="透明処理" id="skelton" disabled="disabled" style="margin-left:2px;">
            <% end %>
        </div>
        <% if @register == true %>
            <input type="checkbox" name="mode" style="margin-left:5px;text-align:center;" id="mode" checked> 登録モードを有効
        <% else %>
            <div style="display:flex;margin-top:5px;">
                <input type="checkbox" name="mode" style="margin-left:5px;margin-right:5px;text-align:center;width:20px;height:20px;flex-basis: 20px;" id="mode">登録モードを有効
            </div>
        <% end %>
        
        <div style="position: absolute;bottom:0;width:100%;">
            <span id="mouse-position">ブラウザ上のマウス位置：</span>
            <br>
            <span id="img-position">画像上のマウス位置：</span>
            <br>
            <span id="org-position">元画像上のマウス位置</span>
            <br>
            <span id="country_count">データ登録数：</span>
            <br>
            <span id="test">***</span>
        </div>
    </div>
    <!-- 新規登録画面 -->
    <div class="signup">
        signup
    </div>
</div>

<!-- 画像表示ゾーン -->
<div class="display-space" id="display-space">
    <% if @image_path!=nil %>
        <img src="temp.jpg" class="input-image" id="input-image">
    <% elsif @flg && @top!=nil %>
        <img src="country_img/world_map.png" class="input-image" id="input-image2"　 style="<%= "top: #{@top}; left: #{@left}; width: #{@width}; height: #{@height}; max-width: initial; max-height: initial;" %>">
        <img src="テスト画像.png" class="input-image" id="input-image" style="<%= "top: #{@top}; left: #{@left}; width: #{@width}; height: #{@height}; max-width: initial; max-height: initial;" %>">
    <% elsif @flg && @top==nil %>
        <img src="テスト画像.png" class="input-image" id="input-image">
    <% else %>
        <img src="country_img/world_map.png" class="input-image" id="input-image2">
        <img src="country_img/skelton.png" class="input-image" id="input-image">
    <% end %>
    <span class="horizontal" id="horizontal"></span>
    <span class="vertical" id="vertical"></span>
    <button class="menu_icon" id="menu_icon">×</button>
    <button type="button" value="－縮小" id="smaller" class="smaller">‐</button>
    <button type="button" value="＋拡大" id="bigger" class="bigger">+</button>
    <button type="button" value="リセット" id="reset" class="reset">R</button>
    <div class="balloon4" id="select1">選択１</div>
    <div class="balloon4" id="select2">選択２</div>
    <div class="balloon4" id="select3">選択３</div>
    <div class="balloon4" id="select4">選択４</div>
    <div class="droppin" id="droppin"></div>
</div>

<!-- 以下、javascript -->
<script type="text/javascript">
    var style_size = 0;
    var mX = 0 ;
    var mY = 0;
    var ini_width = 0;
    var ini_height = 0;
    var top_pos  = "";
    var left_pos  = "";
    var img_h  = "";
    var img_w  = "";
    var img_top_abs = "";
    var img_left_abs = "";
    var img_mouse_x = 0;
    var img_mouse_y = 0;
    var OrgWidth = 0;
    var OrgHeight = 0;
    var Org_mouse_x = 0;
    var Org_mouse_y = 0;
    var mX_start = 0;
    var mY_start = 0;
    var drag_flg = false
    var out_range_flg = false
    const mode = document.getElementsByName("mode");
    var mX_before = 0;
    var mY_before = 0;
    var img_move_flg = false; //マウスダウン中はtrue,マウスアップ中はfalse
    var check =false //登録したデータがファイルに追加されているかチェック（デバッグ用）
    var hoverFlag = false //マウスが画像上にホバーしている時はTRUE
    var menu_open_flg = true //メニューが開いてる時TRUE
    var now_country =""
    var now_capital =""
    var country_list =[];
    var capital_list =[];
    var correct_option = 0; //現在出題されている問題の答え番号（１～４）
    //MAP上にマウスがいる時
    $('#input-image').hover(function() {
        hoverFlag=true
    });
    //MAP上にマウスがない時
    $('.wrapper').hover(function() {
        hoverFlag=false
    });
    //重複なし乱数生成(0~入力値-1までの範囲で3つ取り出す)
    function random(arr_length, answer_index){
        var arr = [...Array(arr_length).keys()]
        arr.splice( answer_index, 1 ); //答えの配列番号は除外
        var a = arr.length;
        var temp =[]
        while (a) { //答え以外でシャッフル
            var j = Math.floor( Math.random() * a );
            var t = arr[--a];
            arr[a] = arr[j];
            arr[j] = t;
        }
        temp.push(arr[0])
        temp.push(arr[1])
        temp.push(arr[2])
        temp.push(answer_index) //答えを追加
        a = temp.length;
        while (a) { //答えを入れた4つをシャッフル
            var j = Math.floor( Math.random() * a );
            var t = temp[--a];
            temp[a] = temp[j];
            temp[j] = t;
        }
        return temp
    }
    //--------------------------------------------------------------------
    // publicフォルダからの相対パスで指定
    // 謎現象：country_pos.txtと指定すると、publicにそのファイル名がないのに読み込まれる．
    var country_table = [];
    // readTextFile("country.txt")
    function sort_data(table){
        // var country = str.split('/')
        var temp = ""
        for(var i=0; i<table.length-1; i++){
            for(var j=i+1; j<=table.length - 1; j++){
                if(table[i].toLowerCase() > table[j].toLowerCase()){ //大文字と小文字を区別しない
                    temp = table[i]
                    table[i] = table[j]
                    table[j] = temp
                }
            }
        }
        return table;
    }
    //国リストを表示
    function display_list(){
        var target_items = '<select name="delete_menu" id="delete_menu">';
        var country_count = 0;
        country_table.forEach(function( str ) {
            var country = str.split('/');
            if(country[0] != ""){ //空白は表示しない（ファイルの最終行に改行があるため）
                target_items = target_items + '<option value="' + country[0] + '">'+country[0]+'</option>';
                country_list.push(country[0])
                capital_list.push(country[1])
                country_count++;
                // デバッグ用
                var x = "<%= @country %>";
                if(country[0]==x){
                    check=true
                }//ここまで
            }
        });
        if(check==false && "<%= @country %>"!=""){alert("<%= @country %>"+"が追加されていません")} //デバッグ用
        target_items = target_items + '</select>';
        elem = document.getElementById('delete_menu')
        elem.innerHTML = target_items
        elem_count = document.getElementById('country_count')
        elem_count.innerHTML = '<span id="country_count">データ登録数：'+ country_count +'カ国</span>'
    }

    //国の特定と表示
    function country_display(col,row) {
        var pos_key = "["+col + ", " + row+"]";
        country_table.forEach(function( str ) {
            if(str.indexOf(pos_key) != -1){
                var country = str.split('/')
                //画像表示
                elem = document.getElementById('input-image')
                elem.src = "country_img/"+country[0] + ".png";
                // var file = "country_region-/"+country[0] + ".png"
                // elem.innerHTML = '<img src="temp.jpg" class="input-image" id="input-image">' +
                //                     '<img src="temp.jpg" class="input-image2" id="input-image2">'
                m_position = document.getElementById('test')
                m_position.innerHTML = '<span id="test">国名：'+country[0]+' 首都名'+ country[1] +'</span>'
                now_country = country[0] //グローバル変数
                now_capital = country[1] //グローバル変数
            }
        });
    }
    function readTextFile(file){
        var rawFile = new XMLHttpRequest();
        var allText = "";
        rawFile.open("GET", file, true);
        //以下３行はキャッシュから取得しない設定
        rawFile.setRequestHeader('Pragma', 'no-cache');
        rawFile.setRequestHeader('Cache-Control', 'no-cache');
        rawFile.setRequestHeader('If-Modified-Since', 'Thu, 01 Jun 1970 00:00:00 GMT');
        rawFile.onreadystatechange = function (){
            dispLoading("Now Loading ．．．")
            if(rawFile.readyState === 4){
                if(rawFile.status === 200 || rawFile.status == 0){
                    allText = rawFile.responseText;
                    country_table = allText.split(/\n/) //「japan/tokyo/[1022,2091]」改行コードで配列化
                    country_table = country_table.filter(Boolean); //空白除去
                    country_table = sort_data(country_table)
                    display_list() // ドロップダウンに国をリストする
                }
                else if(rawFile.status === 304){
                    alert("ステータスコード：304")
                }else{
                    allText="失敗"
                    alert("データ取得失敗")
                }
                removeLoading()
            }
        }
        rawFile.send(null);
    }

    //--------------------------------------------------------------------
    // 登録モードボタン
    document.getElementById("mode").onclick = function (event) {
        const mode = document.getElementsByName("mode");
        var delete_btn = document.getElementById("delete")
        var history_btn = document.getElementById("history")
        var skelton_btn = document.getElementById("skelton")
        if(mode[0].checked){
            //登録モードがON
            delete_btn.disabled = false;
            history_btn.disabled = false;
            skelton_btn.disabled = false;
        }else{
            delete_btn.disabled = true;
            history_btn.disabled = true;
            skelton_btn.disabled = true;
        }
    };
    //選択肢ボタン
    document.getElementById("select1").onclick = function (event) {
        if(correct_option==1){
            alert("正解")
        }else{
            alert("残念")
        }
    }
    document.getElementById("select2").onclick = function (event) {
        if(correct_option==2){
            alert("正解")
        }else{
            alert("残念")
        }
    }
    document.getElementById("select3").onclick = function (event) {
        if(correct_option==3){
            alert("正解")
        }else{
            alert("残念")
        }
    }
    document.getElementById("select4").onclick = function (event) {
        if(correct_option==4){
            alert("正解")
        }else{
            alert("残念")
        }
    }
    // 縮小ボタン
    document.getElementById("smaller").onclick = function (event) {
        // 縮小
        // photo_scale_smaller();
        photo_scale_change(0.95);
    }
    // 拡大ボタン
    document.getElementById("bigger").onclick = function (event) {
        // 拡大
        // photo_scale_bigger();
        photo_scale_change(1.05);
    }
    // リセットボタン
    document.getElementById("reset").onclick = function (event) {
        // リセット
        photo_scale_reset();
    }
    // menu開くボタンクリック
    document.getElementById("menu_icon").onclick = function (event) {
        if(menu_open_flg){
            //閉じる処理
            $(".wrapper").css({
                "display": "none",
            });
            $(".menu_icon").css({
                "left": "30px",
            });
            $(".menu_icon").text("M");
            menu_open_flg=false
        }else{
            //開く処理
            $(".wrapper").css({
                "display": "initial",
            });
            $(".menu_icon").css({
                "left": "275px",
            });
            $(".menu_icon").text("×");
            menu_open_flg=true
        }

    }
    // データ削除ボタン（登録モードのとき）
    // 選択されている国を登録から削除する
    // データを削除したテキスト内容をコントローラに送る
    document.getElementById("delete").onclick = function (event) {
        // 削除
        var delete_key = $('#delete_menu option:selected').text(); //例：japan
        //データを削除するpostリクエスト
        postDeleteCountry(delete_key);
    }
    //画像透明化アクション（バッチ処理）
    document.getElementById("skelton").onclick = function (event) {
        postskelton();
    }
    // 履歴ボタン
    document.getElementById("history").onclick = function (event) {
    }
    var send_pos_data = ""; //post送信用のデータ｛例｝x1,y1,x2,y2,x3,y3
    var region_index = 2;
    var dummy_data =""; //実際に送るデータではない（アラートに表示用）
    // 画像上でクリック
    document.getElementById("input-image").onclick = function (event) {
        if(drag_flg){
            //マウスダウンとマウスアップの間にマウス移動があった場合、クリックとみなさない！
            return
        }
        // 画像処理
        const mode = document.getElementsByName("mode");
        var country_name = document.getElementById("country").value;
        var capital_name = document.getElementById("capital").value;
        if(mode[0].checked){
            if(country_name != "" && capital_name != ""){
                dummy_data += "["+ Math.round(Org_mouse_x) + ',' + Math.round(Org_mouse_y) +"]" 
                var result = window.confirm('国を登録しますか？\n※'+ region_index +'つ目の領域を選択する場合はキャンセル\n選択中の座標：'+dummy_data);
                if(result) {
                    send_pos_data += Math.round(Org_mouse_x) + ',' + Math.round(Org_mouse_y)
                    alert(send_pos_data)
                    postForm(send_pos_data);
                    region_index = 2;
                }else{
                    //複数領域の選択
                    send_pos_data += Math.round(Org_mouse_x) + ',' + Math.round(Org_mouse_y) + ','
                    region_index++
                }
            }else{
                alert("国名、首都名を入力してください")
            }
        }else{
            // alert("管理モードがONになっていません！")
            var elem = document.getElementById("droppin")
            elem.style.left = mX - 10 + "px";
            elem.style.top = mY - 50 + "px";
            elem.style.display = 'initial';
            var answer = country_list.indexOf(now_country);
            var random_num =random(country_list.length-1,answer)
            var num1 = random_num[0]
            var num2 = random_num[1]
            var num3 = random_num[2]
            var num4 = random_num[3]
            var elem = document.getElementById("select1")
            elem.innerHTML = "選択１： "+country_list[num1]
            elem = document.getElementById("select2")
            elem.innerHTML = "選択２： "+country_list[num2]
            elem = document.getElementById("select3")
            elem.innerHTML = "選択３： "+country_list[num3]
            elem = document.getElementById("select4")
            elem.innerHTML = "選択４： "+country_list[num4]
            var cards = [num1,num2,num3,num4];
            correct_option = cards.indexOf(answer) + 1; //正解番号を記憶
            // alert("正解は。。。"+correct_option)
        }
    }
    //マウスホイール
    document.addEventListener("mousewheel", function(e) {
        //画像表示スペース上でホイールされたら、画像のサイズ変更をする
        if(hoverFlag==false){ //hover時のborderプロパティで判断(greenなら)
            return  //範囲外
        }
        var delta = e.deltaY;
        if (delta < 0){
            // 拡大
            // photo_scale_bigger();
            photo_scale_change(1.05);
        }else{
            // 縮小
            // photo_scale_smaller();
            photo_scale_change(0.95);
        }
    });

    //マウスダウン
    document.addEventListener("mousedown", function(e) {
        out_range_flg = false
        if(hoverFlag==false){ //hover時のborderプロパティで判断（greenなら）
            //範囲外
            out_range_flg = true //マウスアップ時にこのフラグを見て、判断
            return
        }
        mX_start = e.pageX;  //X座標
        mY_start = e.pageY;  //Y座標
        drag_flg = false;   //フラグリセット
        img_move_flg = true; //マウスダウン中はtrue
        //test
        mX_before = e.pageX;  //X座標
        mY_before = e.pageY;  //Y座標
    });
    //マウスアップ
    document.addEventListener("mouseup", function(e) {
        if(out_range_flg==true){ //マウスダウンした場所が画像上でない場合、画像の移動はなし
            //範囲外
            return
        }
        mX_End = e.pageX;  //X座標
        mY_End = e.pageY;  //Y座標
        if(mX_start != mX_End || mY_start != mY_End){
            drag_flg = true //マウス移動があったため、フラグをたてる
        }
        img_move_flg = false; //マウスアップ中はfalse
    });

    function image_move(){
        if(img_move_flg==true){
            diff_x = mX - mX_before; // +:右方向 -:左方向
            diff_y = mY - mY_before; // +:下方向 -:上方向
            str_top = parseFloat(window.getComputedStyle(document.getElementById("input-image"), null).getPropertyValue('top')) + diff_y
            str_top = str_top + "px"
            str_left = parseFloat(window.getComputedStyle(document.getElementById("input-image"), null).getPropertyValue('left')) + diff_x
            str_left = str_left + "px"
            pin_top = parseFloat(window.getComputedStyle(document.getElementById("droppin"), null).getPropertyValue('top')) + diff_y
            pin_left = parseFloat(window.getComputedStyle(document.getElementById("droppin"), null).getPropertyValue('left')) + diff_x
            document.getElementById("input-image").style.top = str_top;
            document.getElementById("input-image").style.left = str_left;
            document.getElementById("input-image2").style.top = str_top;
            document.getElementById("input-image2").style.left = str_left;
            document.getElementById("droppin").style.top = pin_top+"px";
            document.getElementById("droppin").style.left = pin_left+"px";
            mX_before = mX;
            mY_before = mY;
        }
    };

    document.addEventListener('dragstart', function(event) {
    const draggable = event.target.getAttribute('draggable');
    // 明示的にdraggableにしている要素以外ドラッグ禁止
    if (!draggable || draggable === 'auto') {
        event.preventDefault();
    }
    });
    // マウスポインタの位置
    document.addEventListener("mousemove", function(e){
        mX = e.pageX;  //X座標
        mY = e.pageY;  //Y座標
        //座標を表示する
        var m_position = document.getElementById('mouse-position')
        m_position.innerHTML = '<span id="mouse-position">ブラウザ上のマウス位置：('+ mX + ',' + mY + ')</span>'
        if(hoverFlag==false){ //hover時のborderプロパティで判断（greenなら）
            //範囲外
            document.getElementById("vertical").style.display = 'none';
            document.getElementById("horizontal").style.display = 'none';
            return
        }
        //縦線表示
        var X = mX;
        document.getElementById("vertical").style.left = X + 'px';
        document.getElementById("vertical").style.display = 'inline-block';
        //横線表示
        var Y = mY;
        document.getElementById("horizontal").style.top = Y + 'px';
        document.getElementById("horizontal").style.display = 'inline-block';
        //座標の表示
        position_display();
        country_display(Math.round(Org_mouse_x),Math.round(Org_mouse_y));
        image_move();
    });
    function position_display(){
        //画像上のマウスの位置
        // top,leftはdisplay_splaceの中心座標（原点はdisplay_spaceの左上）
        // 画像はtransformでw/hの50%分移動させて中央揃えしている
        // display_spaceのtop/left分だけ座標をプラスする
        top_pos  = window.getComputedStyle(document.getElementById("input-image"), null).getPropertyValue('top');
        left_pos  = window.getComputedStyle(document.getElementById("input-image"), null).getPropertyValue('left');
        img_h  = window.getComputedStyle(document.getElementById("input-image"), null).getPropertyValue('height');
        img_w  = window.getComputedStyle(document.getElementById("input-image"), null).getPropertyValue('width');
        img_top_abs = parseFloat(top_pos) - (parseFloat(img_h) / 2);
        img_left_abs = parseFloat(left_pos) - (parseFloat(img_w) / 2);
        // 画像上のマウス位置
        // img_mouse_x = Math.round(mX - img_left_abs)
        // img_mouse_y = Math.round(mY - img_top_abs)
        img_mouse_x = mX - img_left_abs
        img_mouse_y = mY - img_top_abs
        // 画像上のマウス位置表示
        m_position = document.getElementById('img-position')
        m_position.innerHTML = '<span id="img-position">画像上のマウス位置：('+ Math.round(img_mouse_x) + ',' + Math.round(img_mouse_y) + ')</span>'
        // オリジナル画像に対するマウス位置
        OrgWidth = parseFloat(document.getElementById('input-image').naturalWidth);
        OrgHeight = parseFloat(document.getElementById('input-image').naturalHeight);
        // Org_mouse_x = Math.round((OrgWidth / parseFloat(img_w)) * img_mouse_x);
        // Org_mouse_y = Math.round((OrgHeight / parseFloat(img_h)) * img_mouse_y);
        Org_mouse_x = (OrgWidth / parseFloat(img_w) * img_mouse_x);
        Org_mouse_y = (OrgHeight / parseFloat(img_h) * img_mouse_y);
        m_position = document.getElementById('org-position')
        m_position.innerHTML = '<span id="org-position">元画像上のマウス位置：('+ Math.round(Org_mouse_x) + ',' + Math.round(Org_mouse_y) + ')</span>'
    };
    function pos_calc(in_x,in_y){
        //画像上のマウスの位置を取得
        // top,leftはdisplay_splaceの中心座標（原点はdisplay_spaceの左上）
        // 画像はtransformでw/hの50%分移動させて中央揃えしている
        // display_spaceのtop/left分だけ座標をプラスする
        var top_pos  = window.getComputedStyle(document.getElementById("input-image"), null).getPropertyValue('top');
        var left_pos  = window.getComputedStyle(document.getElementById("input-image"), null).getPropertyValue('left');
        var img_h  = window.getComputedStyle(document.getElementById("input-image"), null).getPropertyValue('height');
        var img_w  = window.getComputedStyle(document.getElementById("input-image"), null).getPropertyValue('width');
        var img_top_abs = parseFloat(top_pos) - (parseFloat(img_h) / 2);
        var img_left_abs = parseFloat(left_pos) - (parseFloat(img_w) / 2);
        // 表示されている画像上のマウス位置（拡大、縮小を考慮）
        var img_mouse_x = in_x - img_left_abs // var img_mouse_x = mX - img_left_abs
        var img_mouse_y = in_y - img_top_abs // var img_mouse_y = mY - img_top_abs
        // オリジナル画像に対するマウス位置
        var OrgWidth = parseFloat(document.getElementById('input-image').naturalWidth);
        var OrgHeight = parseFloat(document.getElementById('input-image').naturalHeight);
        var out_x = (OrgWidth / parseFloat(img_w) * img_mouse_x);
        var out_y = (OrgHeight / parseFloat(img_h) * img_mouse_y);
        return [out_x, out_y]
    };
    // 拡大・縮小関数[scale:0.95,1.05など]
    function photo_scale_change(scale) {
        //スケール変換前の画像上のマウス位置
        position_display();
        var Org_mouse_x1 = Org_mouse_x
        var Org_mouse_y1 = Org_mouse_y
        var x = parseFloat(window.getComputedStyle(document.getElementById("droppin"), null).getPropertyValue('left'));
        var y = parseFloat(window.getComputedStyle(document.getElementById("droppin"), null).getPropertyValue('top'));
        var pos = pos_calc(x+10,y+50) //pinの画像上の位置を取得
        var org_pin_x1 = pos[0] //pinのX位置
        var org_pin_y1 = pos[1] //pinのY位置
        // alert(Org_mouse_x1+","+org_pin_x1)
        // alert(Org_mouse_y1+","+org_pin_y1)
        // スケール変換前のサイズ:width
        style_size = window.getComputedStyle(document.getElementById("input-image"), null).getPropertyValue('width');
        style_size_h = window.getComputedStyle(document.getElementById("input-image"), null).getPropertyValue('height');
        style_size = parseFloat(style_size) * scale
        style_size_h = parseFloat(style_size_h) * scale
        document.getElementById("input-image").style.width = style_size+"px";
        document.getElementById("input-image").style.height = style_size_h+"px";
        document.getElementById("input-image").style.maxWidth = 'initial';
        document.getElementById("input-image").style.maxHeight = 'initial';
        document.getElementById("input-image2").style.width = style_size+"px";
        document.getElementById("input-image2").style.height = style_size_h+"px";
        document.getElementById("input-image2").style.maxWidth = 'initial';
        document.getElementById("input-image2").style.maxHeight = 'initial';
        if(hoverFlag==false){ //hover時のborderプロパティで判断（greenなら）
            //範囲外
            //マウスポインタが画像に乗っていない時は以下実行しない（ボタンでサイズ変更したとき）
            return
        }
        //マウスポインタの位置を中心にサイズ変換する
        position_display(); //座標取得
        //X方向の計算・移動
        var differ_x = Org_mouse_x - Org_mouse_x1
        var left_val = window.getComputedStyle(document.getElementById("input-image"), null).getPropertyValue('left');
        width_after = window.getComputedStyle(document.getElementById("input-image"), null).getPropertyValue('width');
        differ_x = parseFloat(width_after) / parseFloat(OrgWidth) * differ_x //画像サイズに対するピクセルの大きさ調整
        var set_val = parseFloat(left_val) + differ_x
        x = parseFloat(window.getComputedStyle(document.getElementById("droppin"), null).getPropertyValue('left'));
        y = parseFloat(window.getComputedStyle(document.getElementById("droppin"), null).getPropertyValue('top'));
        pos = pos_calc(x+10,y+50) //pinの画像上の位置を取得(10,50の補正値はPINの刺さる場所を基点にするための補正)
        var org_pin_x = pos[0] //pinのX位置
        var org_pin_y = pos[1] //pinのY位置
        var pin_differ_x = org_pin_x - org_pin_x1
        pin_differ_x = parseFloat(width_after) / parseFloat(OrgWidth) * pin_differ_x
        var pin_left_val = window.getComputedStyle(document.getElementById("droppin"), null).getPropertyValue('left');
        var left_set_val = parseFloat(pin_left_val) + differ_x - pin_differ_x //differ_x - pin_differ_xで画像とPINの２重移動を補正
        //--------------------------------------------------------------------
        document.getElementById("input-image").style.left = set_val + 'px';
        document.getElementById("input-image2").style.left = set_val + 'px';
        //--------------------------------------------------------------------
        document.getElementById("droppin").style.left = left_set_val + 'px';
        //Y方向の計算・移動
        var differ_y = Org_mouse_y - Org_mouse_y1
        var top_val = window.getComputedStyle(document.getElementById("input-image"), null).getPropertyValue('top');
        height_after = window.getComputedStyle(document.getElementById("input-image"), null).getPropertyValue('height');
        differ_y = parseFloat(height_after) / parseFloat(OrgHeight) * differ_y //画像サイズに対するピクセルの大きさ調整
        var set_val = parseFloat(top_val) + differ_y
        var pin_differ_y = org_pin_y - org_pin_y1
        pin_differ_y = parseFloat(height_after) / parseFloat(OrgHeight) * pin_differ_y
        var pin_top_val = window.getComputedStyle(document.getElementById("droppin"), null).getPropertyValue('top');
        var top_set_val = parseFloat(pin_top_val) + differ_y - pin_differ_y //differ_x - pin_differ_xで画像とPINの２重移動を補正
        document.getElementById("input-image").style.top = set_val + 'px';
        document.getElementById("input-image2").style.top = set_val + 'px';
        document.getElementById("droppin").style.top = top_set_val + 'px';
    };

    // 画像サイズリセット
    function photo_scale_reset() {
        document.getElementById("input-image").style.width = 'auto';
        document.getElementById("input-image").style.height = 'auto';
        document.getElementById("input-image").style.maxWidth = '100%';
        document.getElementById("input-image").style.maxHeight = '100%';
        document.getElementById("input-image").style.top = '50%';
        document.getElementById("input-image").style.left = '50%';
        document.getElementById("input-image").style.transform = 'translate(-50%, -50%)';
        document.getElementById("input-image2").style.width = 'auto';
        document.getElementById("input-image2").style.height = 'auto';
        document.getElementById("input-image2").style.maxWidth = '100%';
        document.getElementById("input-image2").style.maxHeight = '100%';
        document.getElementById("input-image2").style.top = '50%';
        document.getElementById("input-image2").style.left = '50%';
        document.getElementById("input-image2").style.transform = 'translate(-50%, -50%)';
        document.getElementById("droppin").style.display = 'none';
        send_pos_data="";
        region_index = 2;
        dummy_data=""
    };

    // POST送信
    function postForm(value) {
        var form = document.createElement('form');
    
        form.method = 'POST';
        form.action = '/proccess';
    
        var request1 = document.createElement('input');
        request1.type = 'hidden'; //入力フォームが表示されないように
        request1.name = 'position';
        request1.value = value;
        form.appendChild(request1);

        var request2 = document.createElement('input');
        request2.type = 'hidden'; //入力フォームが表示されないように
        request2.name = 'top';
        request2.value = window.getComputedStyle(document.getElementById("input-image"), null).getPropertyValue('top');
        form.appendChild(request2);

        var request3 = document.createElement('input');
        request3.type = 'hidden'; //入力フォームが表示されないように
        request3.name = 'left';
        request3.value = window.getComputedStyle(document.getElementById("input-image"), null).getPropertyValue('left');
        form.appendChild(request3);

        var request4 = document.createElement('input');
        request4.type = 'hidden'; //入力フォームが表示されないように
        request4.name = 'width';
        request4.value = window.getComputedStyle(document.getElementById("input-image"), null).getPropertyValue('width');
        form.appendChild(request4);
        
        var request5 = document.createElement('input');
        request5.type = 'hidden'; //入力フォームが表示されないように
        request5.name = 'height';
        request5.value = window.getComputedStyle(document.getElementById("input-image"), null).getPropertyValue('height');
        form.appendChild(request5);

        var request6 = document.createElement('input');
        request6.type = 'hidden'; //入力フォームが表示されないように
        request6.name = 'country';
        request6.value =document.getElementById("country").value;
        form.appendChild(request6);

        var request7 = document.createElement('input');
        request7.type = 'hidden'; //入力フォームが表示されないように
        request7.name = 'capital';
        request7.value =document.getElementById("capital").value;
        form.appendChild(request7);

        document.body.appendChild(form);
        dispLoading("Now Loading ．．．")
        form.submit();
    }
    // POST送信(国名をキーにしてデータを削除する)
    function postDeleteCountry(value) {
        var form = document.createElement('form');
    
        form.method = 'POST';
        form.action = '/remove';
    
        var request1 = document.createElement('input');
        request1.type = 'hidden'; //入力フォームが表示されないように
        request1.name = 'country';
        request1.value = value;
        form.appendChild(request1);

        document.body.appendChild(form);
        dispLoading("Now Loading ．．．")
        form.submit();
    }
    // POST送信(国名をキーにしてデータを削除する)
    function postskelton() {
        var form = document.createElement('form');
    
        form.method = 'POST';
        form.action = '/batch_skelton';
    
        var request1 = document.createElement('input');
        request1.type = 'hidden'; //入力フォームが表示されないように
        request1.name = 'skelton';
        request1.value = "実行";
        form.appendChild(request1);

        document.body.appendChild(form);
        dispLoading("Now Loading ．．．")
        form.submit();
    }

    /* ------------------------------
    Loading イメージ表示関数
    引数： msg 画面に表示する文言
    ------------------------------ */
    function dispLoading(msg){
        // 引数なし（メッセージなし）を許容
        if( msg == undefined ){
            msg = "";
        }
        // 画面表示メッセージ
        var dispMsg = "<div class='loadingMsg'>" + msg + "</div>";
        // ローディング画像が表示されていない場合のみ出力
        if($("#loading").length == 0){
            $("body").append("<div id='loading'>" + dispMsg + "</div>");
        }
    }
    /* ------------------------------
    Loading イメージ削除関数
    ------------------------------ */
    function removeLoading(){
        $("#loading").remove();
    }
</script>